// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'database/object_box_model/entities/RoomLocationOBModel.dart';
import 'database/object_box_model/entities/RoomOBModel.dart';
import 'database/object_box_model/entities/UserOBModel.dart';
import 'database/object_box_model/entities/userFavRooms.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 6023772140699827459),
      name: 'RoomLocationOB',
      lastPropertyId: const obx_int.IdUid(4, 8744809026042645799),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4426476520199557082),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 218708589179883951),
            name: 'mongoRoomId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6707403899378404946),
            name: 'latitude',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8744809026042645799),
            name: 'longitude',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 1753996915927756656),
      name: 'RoomOB',
      lastPropertyId: const obx_int.IdUid(25, 7095101733604420207),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8941994889502324079),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1105391046665175600),
            name: 'mongoRoomId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1881315269410027178),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8477599218740113473),
            name: 'price',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 254326198280008745),
            name: 'rating',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2832093131822162785),
            name: 'bedNumbers',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6656074859282206606),
            name: 'reviewNumbers',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3748083133917304319),
            name: 'roomImages',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5929263090750935088),
            name: 'vendorName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2886574000630611912),
            name: 'yearsHosting',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 412353136065473762),
            name: 'vendorProfession',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 9015617717841804961),
            name: 'authorImage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 5128448604998967206),
            name: 'city',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 6538918448627441319),
            name: 'date',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 4135499863254446310),
            name: 'active',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 7129641178816376876),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 3144780948034142034),
            name: 'localtionDataId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 8020348480946729415),
            relationTarget: 'RoomLocationOB'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 4172937872117811586),
            name: 'avaibleStartTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 3505107893379570634),
            name: 'avaibleEndTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 5884291341620033704),
            name: 'stayFor',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 3438260559794817871),
            name: 'stayOn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 4555406980118739658),
            name: 'petsAllowed',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 7369786094934243584),
            name: 'maxAdults',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 7428754641827444399),
            name: 'maxChildren',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 7095101733604420207),
            name: 'maxInfants',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 826125529312467720),
      name: 'UserFavOB',
      lastPropertyId: const obx_int.IdUid(7, 2220139518696705375),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5738979991859602620),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7191477558351725551),
            name: 'roomName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4419412774339401026),
            name: 'userId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7982023161207811143),
            name: 'roomId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6468261178194488594),
            name: 'roomImages',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8726917373683674675),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2220139518696705375),
            name: 'mongosFavRoomId',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 1040291137909068040),
      name: 'UserOB',
      lastPropertyId: const obx_int.IdUid(12, 2528177280103630347),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1491246913565054012),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 208516405425134224),
            name: 'mongoUserId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5467620241648465943),
            name: 'firstName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3370376236631851435),
            name: 'lastName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1244556058104707714),
            name: 'dateOfBirth',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3918329005901343822),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4691032746661516504),
            name: 'contact',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1871518998255262286),
            name: 'password',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7465712925097931554),
            name: 'profileImage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 7168421005145187450),
            name: 'role',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 4750556984656283046),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 2528177280103630347),
            name: 'updatedAt',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 1040291137909068040),
      lastIndexId: const obx_int.IdUid(1, 8020348480946729415),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    RoomLocationOB: obx_int.EntityDefinition<RoomLocationOB>(
        model: _entities[0],
        toOneRelations: (RoomLocationOB object) => [],
        toManyRelations: (RoomLocationOB object) => {},
        getId: (RoomLocationOB object) => object.id,
        setId: (RoomLocationOB object, int id) {
          object.id = id;
        },
        objectToFB: (RoomLocationOB object, fb.Builder fbb) {
          final mongoRoomIdOffset = fbb.writeString(object.mongoRoomId);
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, mongoRoomIdOffset);
          fbb.addFloat64(2, object.latitude);
          fbb.addFloat64(3, object.longitude);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final mongoRoomIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final latitudeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final longitudeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = RoomLocationOB(
              id: idParam,
              mongoRoomId: mongoRoomIdParam,
              latitude: latitudeParam,
              longitude: longitudeParam);

          return object;
        }),
    RoomOB: obx_int.EntityDefinition<RoomOB>(
        model: _entities[1],
        toOneRelations: (RoomOB object) => [object.localtionData],
        toManyRelations: (RoomOB object) => {},
        getId: (RoomOB object) => object.id,
        setId: (RoomOB object, int id) {
          object.id = id;
        },
        objectToFB: (RoomOB object, fb.Builder fbb) {
          final mongoRoomIdOffset = fbb.writeString(object.mongoRoomId);
          final nameOffset = fbb.writeString(object.name);
          final roomImagesOffset = fbb.writeList(
              object.roomImages.map(fbb.writeString).toList(growable: false));
          final vendorNameOffset = fbb.writeString(object.vendorName);
          final vendorProfessionOffset =
              fbb.writeString(object.vendorProfession);
          final authorImageOffset = fbb.writeString(object.authorImage);
          final cityOffset = fbb.writeString(object.city);
          final dateOffset = fbb.writeString(object.date);
          final descriptionOffset = fbb.writeString(object.description);
          final stayForOffset = fbb.writeString(object.stayFor);
          final stayOnOffset = fbb.writeString(object.stayOn);
          fbb.startTable(26);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, mongoRoomIdOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addFloat64(3, object.price);
          fbb.addFloat64(4, object.rating);
          fbb.addInt64(5, object.bedNumbers);
          fbb.addInt64(6, object.reviewNumbers);
          fbb.addOffset(7, roomImagesOffset);
          fbb.addOffset(8, vendorNameOffset);
          fbb.addInt64(9, object.yearsHosting);
          fbb.addOffset(10, vendorProfessionOffset);
          fbb.addOffset(11, authorImageOffset);
          fbb.addOffset(12, cityOffset);
          fbb.addOffset(13, dateOffset);
          fbb.addBool(14, object.active);
          fbb.addOffset(15, descriptionOffset);
          fbb.addInt64(16, object.localtionData.targetId);
          fbb.addInt64(17, object.avaibleStartTime.millisecondsSinceEpoch);
          fbb.addInt64(18, object.avaibleEndTime.millisecondsSinceEpoch);
          fbb.addOffset(19, stayForOffset);
          fbb.addOffset(20, stayOnOffset);
          fbb.addBool(21, object.petsAllowed);
          fbb.addInt64(22, object.maxAdults);
          fbb.addInt64(23, object.maxChildren);
          fbb.addInt64(24, object.maxInfants);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final mongoRoomIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final priceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final ratingParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final bedNumbersParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final reviewNumbersParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final roomImagesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 18, []);
          final vendorNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final yearsHostingParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final vendorProfessionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 24, '');
          final authorImageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 26, '');
          final cityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 28, '');
          final dateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 30, '');
          final activeParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 32, false);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 34, '');
          final avaibleStartTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 38, 0));
          final avaibleEndTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 40, 0));
          final stayForParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 42, '');
          final stayOnParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 44, '');
          final petsAllowedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 46, false);
          final maxAdultsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 48, 0);
          final maxChildrenParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 50, 0);
          final maxInfantsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 52, 0);
          final object = RoomOB(
              id: idParam,
              mongoRoomId: mongoRoomIdParam,
              name: nameParam,
              price: priceParam,
              rating: ratingParam,
              bedNumbers: bedNumbersParam,
              reviewNumbers: reviewNumbersParam,
              roomImages: roomImagesParam,
              vendorName: vendorNameParam,
              yearsHosting: yearsHostingParam,
              vendorProfession: vendorProfessionParam,
              authorImage: authorImageParam,
              city: cityParam,
              date: dateParam,
              active: activeParam,
              description: descriptionParam,
              avaibleStartTime: avaibleStartTimeParam,
              avaibleEndTime: avaibleEndTimeParam,
              stayFor: stayForParam,
              stayOn: stayOnParam,
              petsAllowed: petsAllowedParam,
              maxAdults: maxAdultsParam,
              maxChildren: maxChildrenParam,
              maxInfants: maxInfantsParam);
          object.localtionData.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0);
          object.localtionData.attach(store);
          return object;
        }),
    UserFavOB: obx_int.EntityDefinition<UserFavOB>(
        model: _entities[2],
        toOneRelations: (UserFavOB object) => [],
        toManyRelations: (UserFavOB object) => {},
        getId: (UserFavOB object) => object.id,
        setId: (UserFavOB object, int id) {
          object.id = id;
        },
        objectToFB: (UserFavOB object, fb.Builder fbb) {
          final roomNameOffset = fbb.writeString(object.roomName);
          final userIdOffset = fbb.writeString(object.userId);
          final roomIdOffset = fbb.writeString(object.roomId);
          final roomImagesOffset = fbb.writeList(
              object.roomImages.map(fbb.writeString).toList(growable: false));
          final mongosFavRoomIdOffset = fbb.writeString(object.mongosFavRoomId);
          fbb.startTable(8);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, roomNameOffset);
          fbb.addOffset(2, userIdOffset);
          fbb.addOffset(3, roomIdOffset);
          fbb.addOffset(4, roomImagesOffset);
          fbb.addInt64(5, object.createdAt.millisecondsSinceEpoch);
          fbb.addOffset(6, mongosFavRoomIdOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final mongosFavRoomIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final roomNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final userIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final roomIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final roomImagesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 12, []);
          final object = UserFavOB(idParam, createdAtParam,
              mongosFavRoomId: mongosFavRoomIdParam,
              roomName: roomNameParam,
              userId: userIdParam,
              roomId: roomIdParam,
              roomImages: roomImagesParam);

          return object;
        }),
    UserOB: obx_int.EntityDefinition<UserOB>(
        model: _entities[3],
        toOneRelations: (UserOB object) => [],
        toManyRelations: (UserOB object) => {},
        getId: (UserOB object) => object.id,
        setId: (UserOB object, int id) {
          object.id = id;
        },
        objectToFB: (UserOB object, fb.Builder fbb) {
          final mongoUserIdOffset = fbb.writeString(object.mongoUserId);
          final firstNameOffset = fbb.writeString(object.firstName);
          final lastNameOffset = fbb.writeString(object.lastName);
          final emailOffset = fbb.writeString(object.email);
          final contactOffset = fbb.writeString(object.contact);
          final passwordOffset = fbb.writeString(object.password);
          final profileImageOffset = object.profileImage == null
              ? null
              : fbb.writeString(object.profileImage!);
          final roleOffset = fbb.writeString(object.role);
          fbb.startTable(13);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, mongoUserIdOffset);
          fbb.addOffset(2, firstNameOffset);
          fbb.addOffset(3, lastNameOffset);
          fbb.addInt64(4, object.dateOfBirth.millisecondsSinceEpoch);
          fbb.addOffset(5, emailOffset);
          fbb.addOffset(6, contactOffset);
          fbb.addOffset(7, passwordOffset);
          fbb.addOffset(8, profileImageOffset);
          fbb.addOffset(9, roleOffset);
          fbb.addInt64(10, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(11, object.updatedAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final mongoUserIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final firstNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final lastNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final dateOfBirthParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final contactParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final passwordParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final profileImageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final roleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0));
          final object = UserOB(
              id: idParam,
              mongoUserId: mongoUserIdParam,
              firstName: firstNameParam,
              lastName: lastNameParam,
              dateOfBirth: dateOfBirthParam,
              email: emailParam,
              contact: contactParam,
              password: passwordParam,
              profileImage: profileImageParam,
              role: roleParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [RoomLocationOB] entity fields to define ObjectBox queries.
class RoomLocationOB_ {
  /// See [RoomLocationOB.id].
  static final id =
      obx.QueryIntegerProperty<RoomLocationOB>(_entities[0].properties[0]);

  /// See [RoomLocationOB.mongoRoomId].
  static final mongoRoomId =
      obx.QueryStringProperty<RoomLocationOB>(_entities[0].properties[1]);

  /// See [RoomLocationOB.latitude].
  static final latitude =
      obx.QueryDoubleProperty<RoomLocationOB>(_entities[0].properties[2]);

  /// See [RoomLocationOB.longitude].
  static final longitude =
      obx.QueryDoubleProperty<RoomLocationOB>(_entities[0].properties[3]);
}

/// [RoomOB] entity fields to define ObjectBox queries.
class RoomOB_ {
  /// See [RoomOB.id].
  static final id =
      obx.QueryIntegerProperty<RoomOB>(_entities[1].properties[0]);

  /// See [RoomOB.mongoRoomId].
  static final mongoRoomId =
      obx.QueryStringProperty<RoomOB>(_entities[1].properties[1]);

  /// See [RoomOB.name].
  static final name =
      obx.QueryStringProperty<RoomOB>(_entities[1].properties[2]);

  /// See [RoomOB.price].
  static final price =
      obx.QueryDoubleProperty<RoomOB>(_entities[1].properties[3]);

  /// See [RoomOB.rating].
  static final rating =
      obx.QueryDoubleProperty<RoomOB>(_entities[1].properties[4]);

  /// See [RoomOB.bedNumbers].
  static final bedNumbers =
      obx.QueryIntegerProperty<RoomOB>(_entities[1].properties[5]);

  /// See [RoomOB.reviewNumbers].
  static final reviewNumbers =
      obx.QueryIntegerProperty<RoomOB>(_entities[1].properties[6]);

  /// See [RoomOB.roomImages].
  static final roomImages =
      obx.QueryStringVectorProperty<RoomOB>(_entities[1].properties[7]);

  /// See [RoomOB.vendorName].
  static final vendorName =
      obx.QueryStringProperty<RoomOB>(_entities[1].properties[8]);

  /// See [RoomOB.yearsHosting].
  static final yearsHosting =
      obx.QueryIntegerProperty<RoomOB>(_entities[1].properties[9]);

  /// See [RoomOB.vendorProfession].
  static final vendorProfession =
      obx.QueryStringProperty<RoomOB>(_entities[1].properties[10]);

  /// See [RoomOB.authorImage].
  static final authorImage =
      obx.QueryStringProperty<RoomOB>(_entities[1].properties[11]);

  /// See [RoomOB.city].
  static final city =
      obx.QueryStringProperty<RoomOB>(_entities[1].properties[12]);

  /// See [RoomOB.date].
  static final date =
      obx.QueryStringProperty<RoomOB>(_entities[1].properties[13]);

  /// See [RoomOB.active].
  static final active =
      obx.QueryBooleanProperty<RoomOB>(_entities[1].properties[14]);

  /// See [RoomOB.description].
  static final description =
      obx.QueryStringProperty<RoomOB>(_entities[1].properties[15]);

  /// See [RoomOB.localtionData].
  static final localtionData = obx.QueryRelationToOne<RoomOB, RoomLocationOB>(
      _entities[1].properties[16]);

  /// See [RoomOB.avaibleStartTime].
  static final avaibleStartTime =
      obx.QueryDateProperty<RoomOB>(_entities[1].properties[17]);

  /// See [RoomOB.avaibleEndTime].
  static final avaibleEndTime =
      obx.QueryDateProperty<RoomOB>(_entities[1].properties[18]);

  /// See [RoomOB.stayFor].
  static final stayFor =
      obx.QueryStringProperty<RoomOB>(_entities[1].properties[19]);

  /// See [RoomOB.stayOn].
  static final stayOn =
      obx.QueryStringProperty<RoomOB>(_entities[1].properties[20]);

  /// See [RoomOB.petsAllowed].
  static final petsAllowed =
      obx.QueryBooleanProperty<RoomOB>(_entities[1].properties[21]);

  /// See [RoomOB.maxAdults].
  static final maxAdults =
      obx.QueryIntegerProperty<RoomOB>(_entities[1].properties[22]);

  /// See [RoomOB.maxChildren].
  static final maxChildren =
      obx.QueryIntegerProperty<RoomOB>(_entities[1].properties[23]);

  /// See [RoomOB.maxInfants].
  static final maxInfants =
      obx.QueryIntegerProperty<RoomOB>(_entities[1].properties[24]);
}

/// [UserFavOB] entity fields to define ObjectBox queries.
class UserFavOB_ {
  /// See [UserFavOB.id].
  static final id =
      obx.QueryIntegerProperty<UserFavOB>(_entities[2].properties[0]);

  /// See [UserFavOB.roomName].
  static final roomName =
      obx.QueryStringProperty<UserFavOB>(_entities[2].properties[1]);

  /// See [UserFavOB.userId].
  static final userId =
      obx.QueryStringProperty<UserFavOB>(_entities[2].properties[2]);

  /// See [UserFavOB.roomId].
  static final roomId =
      obx.QueryStringProperty<UserFavOB>(_entities[2].properties[3]);

  /// See [UserFavOB.roomImages].
  static final roomImages =
      obx.QueryStringVectorProperty<UserFavOB>(_entities[2].properties[4]);

  /// See [UserFavOB.createdAt].
  static final createdAt =
      obx.QueryDateProperty<UserFavOB>(_entities[2].properties[5]);

  /// See [UserFavOB.mongosFavRoomId].
  static final mongosFavRoomId =
      obx.QueryStringProperty<UserFavOB>(_entities[2].properties[6]);
}

/// [UserOB] entity fields to define ObjectBox queries.
class UserOB_ {
  /// See [UserOB.id].
  static final id =
      obx.QueryIntegerProperty<UserOB>(_entities[3].properties[0]);

  /// See [UserOB.mongoUserId].
  static final mongoUserId =
      obx.QueryStringProperty<UserOB>(_entities[3].properties[1]);

  /// See [UserOB.firstName].
  static final firstName =
      obx.QueryStringProperty<UserOB>(_entities[3].properties[2]);

  /// See [UserOB.lastName].
  static final lastName =
      obx.QueryStringProperty<UserOB>(_entities[3].properties[3]);

  /// See [UserOB.dateOfBirth].
  static final dateOfBirth =
      obx.QueryDateProperty<UserOB>(_entities[3].properties[4]);

  /// See [UserOB.email].
  static final email =
      obx.QueryStringProperty<UserOB>(_entities[3].properties[5]);

  /// See [UserOB.contact].
  static final contact =
      obx.QueryStringProperty<UserOB>(_entities[3].properties[6]);

  /// See [UserOB.password].
  static final password =
      obx.QueryStringProperty<UserOB>(_entities[3].properties[7]);

  /// See [UserOB.profileImage].
  static final profileImage =
      obx.QueryStringProperty<UserOB>(_entities[3].properties[8]);

  /// See [UserOB.role].
  static final role =
      obx.QueryStringProperty<UserOB>(_entities[3].properties[9]);

  /// See [UserOB.createdAt].
  static final createdAt =
      obx.QueryDateProperty<UserOB>(_entities[3].properties[10]);

  /// See [UserOB.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<UserOB>(_entities[3].properties[11]);
}
